{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","firstName","lastName","bio","hooks","level","version","state","setState","handleChange","evt","value","target","type","checked","name","className","onChange","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAuEeA,G,MApEH,WAAO,IAAD,EACUC,mBAAS,CACjCC,UAAW,GACXC,SAAU,GACVC,IAAK,GACLC,OAAO,EACPC,MAAO,SACPC,QAAS,SAPK,mBACTC,EADS,KACFC,EADE,KAUVC,EAAe,SAAAC,GACnB,IAAMC,EAA4B,aAApBD,EAAIE,OAAOC,KAAsBH,EAAIE,OAAOE,QAAUJ,EAAIE,OAAOD,MAC/EH,EAAS,eACJD,EADG,eAELG,EAAIE,OAAOG,KAAOJ,MAIvB,OACE,yBAAKK,UAAU,OACb,8BACE,+BACE,yBAAKA,UAAU,WAAf,cACA,2BAAOH,KAAK,OAAOE,KAAK,YAAYJ,MAAOJ,EAAMN,UAAWgB,SAAUR,KAExE,+BACE,yBAAKO,UAAU,WAAf,aACA,2BAAOH,KAAK,OAAOE,KAAK,WAAWJ,MAAOJ,EAAML,SAAUe,SAAUR,KAEtE,+BACE,yBAAKO,UAAU,WAAf,OACA,8BAAUD,KAAK,MAAMJ,MAAOJ,EAAMJ,IAAKc,SAAUR,KAEnD,+BACE,yBAAKO,UAAU,WAAf,cACA,2BAAOH,KAAK,WAAWE,KAAK,QAAQD,QAASP,EAAMH,MAAOa,SAAUR,KAEtE,6BACE,yBAAKO,UAAU,WAAf,SACA,yCAEE,2BAAOH,KAAK,QAAQE,KAAK,QAAQJ,MAAM,UAAUM,SAAUR,KAE7D,0CAEE,2BAAOI,KAAK,QAAQE,KAAK,QAAQJ,MAAM,WAAWM,SAAUR,KAE9D,2CAEE,2BAAOI,KAAK,QAAQE,KAAK,QAAQJ,MAAM,YAAYM,SAAUR,MAGjE,+BACE,yBAAKO,UAAU,WAAf,oBACA,4BAAQD,KAAK,UAAUE,SAAUR,EAAcE,MAAOJ,EAAMD,SAC1D,4BAAQK,MAAM,KACd,4BAAQA,MAAM,SAAd,YACA,4BAAQA,MAAM,QAAd,WACA,4BAAQA,MAAM,QAAd,WACA,4BAAQA,MAAM,QAAd,WACA,4BAAQA,MAAM,QAAd,cAIN,6BAAMO,KAAKC,UAAUZ,EAAO,KAAM,OCvDpBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03c594c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [state, setState] = useState({\n    firstName: '',\n    lastName: '',\n    bio: '',\n    hooks: true,\n    level: 'master',\n    version: '16.5',\n  });\n\n  const handleChange = evt => {\n    const value = evt.target.type === 'checkbox' ? evt.target.checked : evt.target.value;\n    setState({\n      ...state,\n      [evt.target.name]: value,\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <form>\n        <label>\n          <div className=\"heading\">First Name</div>\n          <input type=\"text\" name=\"firstName\" value={state.firstName} onChange={handleChange} />\n        </label>\n        <label>\n          <div className=\"heading\">Last Name</div>\n          <input type=\"text\" name=\"lastName\" value={state.lastName} onChange={handleChange} />\n        </label>\n        <label>\n          <div className=\"heading\">Bio</div>\n          <textarea name=\"bio\" value={state.bio} onChange={handleChange} />\n        </label>\n        <label>\n          <div className=\"heading\">With hooks</div>\n          <input type=\"checkbox\" name=\"hooks\" checked={state.hooks} onChange={handleChange} />\n        </label>\n        <div>\n          <div className=\"heading\">Level</div>\n          <label>\n            Acolyte\n            <input type=\"radio\" name=\"level\" value=\"acolyte\" onChange={handleChange} />\n          </label>\n          <label>\n            Decarati\n            <input type=\"radio\" name=\"level\" value=\"Decarati\" onChange={handleChange} />\n          </label>\n          <label>\n            KarenaSec\n            <input type=\"radio\" name=\"level\" value=\"KarenaSec\" onChange={handleChange} />\n          </label>\n        </div>\n        <label>\n          <div className=\"heading\">Favorite version</div>\n          <select name=\"version\" onChange={handleChange} value={state.version}>\n            <option value=\"\"></option>\n            <option value=\"16.12\">v16.12.0</option>\n            <option value=\"16.8\">v16.8.0</option>\n            <option value=\"16.7\">v16.7.0</option>\n            <option value=\"16.6\">v16.6.0</option>\n            <option value=\"16.5\">v16.5.0</option>\n          </select>\n        </label>\n      </form>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}